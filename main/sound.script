
-- ***************************************************************************
local function play_sound(self, hash)
	go.set(self.component, "sound", hash) -- override the resource data on the component
	sound.play(self.component) -- start the playing
end


-- ***************************************************************************

local function parse_range(s)
	local _, _, rstart, rend, size = string.find(s, "(%d+)-(%d+)/(%d+)") -- "bytes 0-16383/103277"
	return rstart, rend, size
end

local function http_result(self, _id, response, extra)
	if response.status == 200 or response.status == 206 then
		--pprint(response.headers)
		--pprint(response)
		print("Playing web sound:", response.url)
		local relative_path = self.filename
		local range = response.headers['content-range'] -- content-range = "bytes 0-16383/103277"
		local rstart, rend, filesize = parse_range(range)
		-- Create the Defold resource, "partial" will enable the streaming mode
		print("Creating resource", relative_path)
		local hash = resource.create_sound_data(relative_path, { data = response.response, filesize = filesize, partial = true })
		-- send "play_sound" to the component
		play_sound(self, hash)
	end
end

local function load_web_sound(base_url, relative_path)
	local url = base_url .. "/" .. relative_path
	local headers = {}
	headers['Range'] = string.format("bytes=%d-%d", 0, 16384-1)

	http.request(url, "GET", http_result, headers, nil, { ignore_cache = true })
end

-- ***************************************************************************
function init(self)
	self.component = "#music"
end

function update(self, dt)
end

function on_message(self, message_id, message)
	--pprint("MESSAGE", msg.url(), message_id, message)
	if message_id == hash("start") then
		self.source = message.source
		self.sound_type = message.sound_type
		if message.source == "Web" then
			self.url = message.url
			self.filename = message.filename
			liveupdate.add_mount("webmount", self.url, 100, function ()
					load_web_sound(self.url, self.filename)
				end)
		else
			print("Playing " .. message.source .. " sound:", msg.url(), message.source, message.sound_type)
			sound.play(self.component)
		end
	end
end

function final(self)
	if self.source == hash("Web") then
		liveupdate.remove_mount("webmount")
	end
end

